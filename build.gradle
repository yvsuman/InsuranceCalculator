buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

group = 'com.springboot.insurance'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

def webappDir = "$projectDir/src/main/webapp"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}
 
processResources {
	dependsOn "buildAngular"
}
 
task buildAngular(type:Exec) {
	// installAngular should be run prior to this task
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}
 
task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}


sonarqube {
    properties {
        property "sonar.projectName", "insurance"
        property "sonar.projectKey", "org.sonarqube:insurance"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}
